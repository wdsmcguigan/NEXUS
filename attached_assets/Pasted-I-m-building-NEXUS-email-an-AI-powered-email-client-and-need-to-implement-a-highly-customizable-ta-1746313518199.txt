I'm building NEXUS.email, an AI-powered email client, and need to implement a highly customizable tabbed/paneled UI framework similar to Replit's advanced workspace interface. I need a system where any content can be displayed in any panel, with complete flexibility for users to arrange their workspace.

1. Dynamic Panel System:
   - Create a framework where panels can be created, split, and arranged dynamically
   - Support drag-to-edge functionality that creates new panels when dragging content to panel edges
   - Allow panels to be resized in all directions with intuitive drag handles
   - Enable panels to be maximized, restored, or closed
   - Implement panel serialization to save/restore custom layouts across sessions

2. Universal Tab Management:
   - Any content type should be able to open in any panel as a tab
   - Tabs should be draggable between panels
   - Support for dragging tabs out to create new panels automatically
   - Visual feedback during drag operations showing where the tab will land
   - Context menu options for panel/tab management operations

3. Content Flexibility:
   - Each tab should be able to host any component type (inbox, email view, integrations, etc.)
   - No hardcoded panel-content relationships - users decide what goes where
   - Unified tab interface with appropriate icons and context-specific controls
   - Tab state persistence when moving between panels

4. Default Layout:
   - Provide a sensible default layout as starting point:
     * Left sidebar with account navigation
     * Main content area with email list and viewing panes
     * Bottom panel with integration tabs
   - But allow complete customization from this starting point

5. Technical Requirements:
   - React component architecture with TypeScript
   - Consider libraries like react-mosaic, golden-layout, or a custom implementation
   - Event system for panel/tab communication and state management
   - CSS Grid/Flexbox for responsive panel layouts
   - Clean abstraction layers for panel management separate from content

6. User Experience Features:
   - Visual indicators during drag operations showing potential drop zones
   - Keyboard shortcuts for panel/tab management
   - Panel grouping and tab grouping capabilities
   - Ability to save and load different workspace layouts
   - Panel overflow handling for small screen sizes

Please help me implement this advanced UI framework as the foundation for NEXUS.email. I need the panel/tab system to be completely customizable while still providing an intuitive user experience. Focus on the core architecture that will enable this flexibility.